# Contains common functions used by all cmake files, such as finding various libraries
# or checking for the presence of specific system features


function (findOpenMP)
# unset OpenMP_CXX_FLAGS. If OpenMP loading fails once, it will be set to NOT_FOUND
# and happily cached, thus messing up the compilation flags forever
unset(OpenMP_CXX_FLAGS CACHE)
if (CMAKE_CXX_COMPILER_ID MATCHES AppleClang)
  find_package(OPENMP REQUIRED)
else()
  find_package(OpenMP REQUIRED)
endif()
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}" PARENT_SCOPE)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}" PARENT_SCOPE)
set(OpenMP_CXX_LIBRARIES "${OpenMP_CXX_LIBRARIES}" PARENT_SCOPE)

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR NOT ${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
set(OpenMP_CXX_LIBRARIES ${OpenMP_CXX_LIBRARIES} -latomic PARENT_SCOPE)
endif()
endfunction()

# check for std::filesystem::temp_directory_path
function (checkFileSystem)
include(CheckCXXSourceRuns)
set(CMAKE_REQUIRED_FLAGS " -std=c++17")
check_cxx_source_runs("
    #include <iostream>
    #include <filesystem>
    int main() {
        std::cout << std::filesystem::temp_directory_path();
        return 0;
    }
" CPPNOFS)
if(NOT CPPNOFS)
  set(CMAKE_REQUIRED_FLAGS " -std=c++17")
  set(CMAKE_REQUIRED_LIBRARIES "c++fs")
  check_cxx_source_runs("
      #include <iostream>
      #include <filesystem>
      int main() {
          std::cout << std::filesystem::temp_directory_path();
          return 0;
      }
  " CPPFS)
  unset(CMAKE_REQUIRED_FLAGS)
  unset(CMAKE_REQUIRED_LIBRARIES)
  if(CPPFS)
    set(FILESYSTEM_LIBRARY -lc++fs PARENT_SCOPE)
  else()
    set(CMAKE_REQUIRED_FLAGS " -std=c++17")
    set(CMAKE_REQUIRED_LIBRARIES "stdc++fs")
    check_cxx_source_runs("
        #include <iostream>
        #include <filesystem>
        int main() {
            std::cout << std::filesystem::temp_directory_path();
            return 0;
        }
    " STDCPPFS)
    unset(CMAKE_REQUIRED_FLAGS)
    unset(CMAKE_REQUIRED_LIBRARIES)
    if(STDCPPFS)
      set(FILESYSTEM_LIBRARY -lstdc++fs PARENT_SCOPE)
    else()
      message(FATAL_ERROR "std::filesystem not found")
    endif()
  endif()
endif()
endfunction()


function (findFolly)
unset(FOLLY_LIBRARIES)
find_library(FOLLY_LIBRARIES
  NAMES folly
  HINTS
  ENV LD_LIBRARY_PATH
  PATHS
    $ENV{HOME}/.linuxbrew/lib
)
if(FOLLY_LIBRARIES)
  string(APPEND CMAKE_CXX_FLAGS " -D_USE_FOLLY")
  find_package(OpenSSL REQUIRED COMPONENTS Crypto)
  set(FOLLY_LIBRARIES ${FOLLY_LIBRARIES}
    -ldouble-conversion
    -ldl
    -lboost_regex
    -lboost_filesystem
    -lboost_program_options
    OpenSSL::Crypto
  )
  if(NOT BUILD_STATIC)
    set(FOLLY_LIBRARIES ${FOLLY_LIBRARIES}
      -lglog
      -lgflags
    )
  endif()
  find_library(LIBERTY
    NAMES iberty
    HINTS
    ENV LD_LIBRARY_PATH
    PATHS
      $ENV{HOME}/.linuxbrew/lib
  )
  if(LIBERTY)
    set(FOLLY_LIBRARIES ${FOLLY_LIBRARIES} ${LIBERTY})
  endif()
else()
  set(FOLLY_LIBRARIES "")
  message(WARNING "Folly (Facebook Open Source Library) not found."
  " Install folly to reduce memory taken up by the Row-Compressed annotator"
  " and enable other optimizations.")
endif()
endfunction()


function (buildProgressBar EXTERNAL_LIB_DIR libName)
set(${libName} progress_bar PARENT_SCOPE)
if(TARGET progress_bar)
  return()
endif()
add_library(progress_bar STATIC
    ${EXTERNAL_LIB_DIR}/cpp_progress_bar/progress_bar.cpp
)
endfunction()


function (buildMersenneTwister EXTERNAL_LIB_DIR libName)
set(${libName} mersenne_twister PARENT_SCOPE)
if(TARGET mersenne_twister)
  return()
endif()
add_library(mersenne_twister STATIC
    ${EXTERNAL_LIB_DIR}/rollinghashcpp/mersennetwister.cpp
)
endfunction()


function (findGTest)
if(TARGET gtest)
  return()
endif()
execute_process(COMMAND rm -rf ${EXTERNAL_LIB_DIR}/sdsl-lite/include/gtest)
add_subdirectory(${EXTERNAL_LIB_DIR}/googletest googletest EXCLUDE_FROM_ALL)
target_compile_options(gtest_main PRIVATE -w)
target_compile_options(gtest PRIVATE -w)
set(GTEST_BOTH_LIBRARIES gtest gtest_main PARENT_SCOPE)
endfunction()

# Enables using ccache in order to speed up compilation. Make sure you
# brew install ccache to benefit from it
function (enableCCache)
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
else()
    message(STATUS "ccache not found. Run 'brew install ccache' to speed up re-compilation")
endif(CCACHE_FOUND)
endfunction()
