name: Metagraph C++ CI

on: [push]

jobs:

  Linux:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        alphabet: [DNA, Protein]
        build_type: [Debug, Release]
        compiler: [g++-8, g++-9, g++-10]
        build_static: [OFF]
        include:
          - compiler: g++-8
            cxx: g++-8
            cc: gcc-8

          - compiler: g++-9
            cxx: g++-9
            cc: gcc-9

          - compiler: g++-10
            cxx: g++-10
            cc: gcc-10

          - build_type: Release
            compiler: g++-10
            cxx: g++-10
            cc: gcc-10
            build_static: ON
            alphabet: DNA
        exclude:
          - alphabet: Protein
            compiler: g++-8
          - alphabet: Protein
            compiler: g++-9

    steps:
    - uses: actions/checkout@v1

    - name: checkout submodules
      run: git submodule update --init --recursive

    - name: install dependencies
      run: |
        # If clang, use the default version. Otherwise the compiler install with apt-get.
        if [[ "${{ matrix.compiler }}" == "g++-8" ]]; then
            sudo apt-get --allow-downgrades install \
                g++-8=8-20180414-1ubuntu2 \
                gcc-8-base=8-20180414-1ubuntu2 \
                gcc-8=8-20180414-1ubuntu2 \
                libstdc++-8-dev=8-20180414-1ubuntu2 \
                cpp-8=8-20180414-1ubuntu2 \
                libgcc-8-dev=8-20180414-1ubuntu2 \
                libmpx2=8-20180414-1ubuntu2
        elif [[ "${{ matrix.compiler }}" != "clang" ]]; then
            sudo apt-get install ${{ matrix.compiler }}
        fi

        sudo apt-get install libbz2-dev libhts-dev libjemalloc-dev libboost-all-dev

        if [ "${{ matrix.build_static }}" = "ON" ]; then
          # for static builds, add in curl
          git clone https://github.com/curl/curl.git
          mkdir curl/_build
          cd curl/_build
          cmake -DBUILD_SHARED_LIBS=off ..
          make -j 2
          sudo make install
        fi

    - name: install dependencies for integration tests
      run: |
        pip3 install parameterized
        sudo apt-get install python3-venv

    - name: install sdsl-lite
      run: |
        export CC=$(which ${{ matrix.cc }})
        export CXX=$(which ${{ matrix.cxx }})
        cd metagraph/external-libraries/sdsl-lite
        ./install.sh $(pwd)

    - name: configure
      run: |
        export CC=$(which ${{ matrix.cc }})
        export CXX=$(which ${{ matrix.cxx }})
        mkdir metagraph/build
        cd metagraph/build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_DBG_ALPHABET=${{ matrix.alphabet }} \
              -DBUILD_STATIC=${{ matrix.build_static }} ..

    - name: build metagraph
      run: cd metagraph/build && make -j 2 metagraph

    - name: build unit tests
      if: ${{ matrix.build_static == 'OFF' }}
      run: cd metagraph/build && make -j 2 unit_tests

    - name: build other
      run: cd metagraph/build && make -j 2

    - name: run unit tests
      if: ${{ matrix.build_static == 'OFF' }}
      run: |
        export LD_LIBRARY_PATH="/usr/local/lib/:$LD_LIBRARY_PATH"
        cd metagraph/build && ./unit_tests

    - name: run integration tests
      run: |
        export LD_LIBRARY_PATH="/usr/local/lib/:$LD_LIBRARY_PATH"
        cd metagraph/build && make check

    # for potential release
    - name: upload static binary
      if: ${{ matrix.build_static == 'ON' }}
      uses: actions/upload-artifact@v2
      with:
        name: metagraph_dna_static_binary
        path: metagraph/build/metagraph_DNA


  MacOS:

    runs-on: macos-latest

    strategy:
      matrix:
        alphabet: [DNA]
        build_type: [Debug, Release]

    steps:
    - uses: actions/checkout@v1

    - name: checkout submodules
      run: git submodule update --init --recursive

    - name: install dependencies
      run: brew install bzip2 htslib libomp boost jemalloc

    - name: install dependencies for integration tests
      run: pip3 install parameterized

    - name: install sdsl-lite
      run: |
        cd metagraph/external-libraries/sdsl-lite
        ./install.sh $(pwd)

    - name: configure
      run: |
        mkdir metagraph/build
        cd metagraph/build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_DBG_ALPHABET=${{ matrix.alphabet }} \
              -DWITH_AVX=OFF -DWITH_MSSE42=OFF ..

    - name: build metagraph
      run: cd metagraph/build && make -j 2 metagraph

    - name: build unit tests
      run: cd metagraph/build && make -j 2 unit_tests

    - name: build other
      run: cd metagraph/build && make -j 2

    - name: run unit tests
      run: cd metagraph/build && ./unit_tests

    - name: run integration tests
      run: cd metagraph/build && make check

  Release:
    name: Create Release
    if: ${{ github.ref == 'refs/tags/v*'}}
    runs-on: ubuntu-latest
    needs: Linux
    steps:
      - name: fetch static binary
        uses: actions/download-artifact@v2
        with:
          name: metagraph_dna_static_binary
          path: metagraph_DNA
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: some test release with static binaries for linux
          draft: true
          prerelease: true
      - name: upload static binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./metagraph_DNA
          asset_name: metagraph_DNA
          asset_content_type: application/x-binary
