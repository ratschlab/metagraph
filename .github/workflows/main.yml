name: MetaGraph CI

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}


jobs:

  Linux:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        alphabet: [DNA]
        build_type: [Debug]
        compiler: [g++-11, g++-12, g++-13]
        build_static: [ON]
        with_avx: [ON]
        include:
          - compiler: g++-11
            cxx: g++-11
            cc: gcc-11

          - compiler: g++-12
            cxx: g++-12
            cc: gcc-12

          - compiler: g++-13
            cxx: g++-13
            cc: gcc-13


    name: Linux (${{ matrix.alphabet }}, ${{ matrix.build_type }}, ${{ matrix.compiler }}${{ matrix.build_static == 'ON' && ', static' || '' }}${{ matrix.with_avx == 'OFF' && ', noAVX' || '' }})

    steps:
    - uses: actions/checkout@v1

    - name: checkout submodules
      run: git submodule update --init --recursive

    - name: install dependencies
      run: |
        sudo apt-get update

        # If clang, use the default version. Otherwise the compiler install with apt-get.
        if [[ "${{ matrix.compiler }}" != "clang" ]]; then
            sudo apt-get install ${{ matrix.compiler }}
        fi

        sudo apt-get install libbz2-dev libjemalloc-dev libboost-all-dev libdeflate-dev libzstd-dev

        if [ "${{ matrix.build_static }}" = "ON" ]; then
          sudo apt-get install libcurl4-openssl-dev
        fi

        echo "CC=$(which ${{ matrix.cc }})" >> $GITHUB_ENV
        echo "CXX=$(which ${{ matrix.cxx }})" >> $GITHUB_ENV

    - name: install dependencies for integration tests
      run: |
        pip3 install parameterized
        sudo apt-get install python3-venv

    - name: install sdsl-lite
      run: |
        cd metagraph/external-libraries/sdsl-lite
        ./install.sh $(pwd)

    - name: configure
      run: |
        mkdir metagraph/build
        cd metagraph/build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DBUILD_STATIC=${{ matrix.build_static }} \
              -DWITH_AVX=${{ matrix.with_avx }} -DWITH_MSSE42=${{ matrix.with_avx }} \
              -DCMAKE_DBG_ALPHABET=${{ matrix.alphabet }} ..

    - name: build metagraph
      run: cd metagraph/build && make -j"$(getconf _NPROCESSORS_ONLN)" metagraph

    - name: build unit tests
      if: matrix.build_static == 'OFF'
      run: cd metagraph/build && make -j"$(getconf _NPROCESSORS_ONLN)" unit_tests

    - name: build other
      if: matrix.build_static == 'OFF'
      run: cd metagraph/build && make -j"$(getconf _NPROCESSORS_ONLN)"

    # for potential release
    - name: rename binary
      if: matrix.with_avx == 'OFF'
      run: mv metagraph/build/metagraph_${{ matrix.alphabet }} metagraph/build/metagraph_${{ matrix.alphabet }}_noAVX
        
    - name: run unit tests
      if: matrix.build_static == 'OFF'
      run: |
        export LD_LIBRARY_PATH="/usr/local/lib/:$LD_LIBRARY_PATH"
        cd metagraph/build && ./unit_tests

    - name: run integration tests
      run: |
        export LD_LIBRARY_PATH="/usr/local/lib/:$LD_LIBRARY_PATH"
        cd metagraph/build
        make check || echo "TEST_FAILED" > test_failed.status
        if [ -f test_failed.status ]; then
          echo "Test step failed! Printing memory usage:"
          free -h
          cat /proc/meminfo
          df -h
          exit 1  # Fail the workflow
        fi
