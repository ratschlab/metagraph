name: Metagraph C++ CI

on: [push]

jobs:

  Linux:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        alphabet: [DNA, Protein]
        build_type: [Debug, Release]
        compiler: [g++-8, g++-9, g++-10]
        build_static: [OFF]
        include:
          - compiler: g++-8
            cxx: g++-8
            cc: gcc-8

          - compiler: g++-9
            cxx: g++-9
            cc: gcc-9

          - compiler: g++-10
            cxx: g++-10
            cc: gcc-10

          - build_type: Release
            compiler: g++-10
            cxx: g++-10
            cc: gcc-10
            build_static: ON

        exclude:
          - alphabet: Protein
            compiler: g++-8
          - alphabet: Protein
            compiler: g++-9

    steps:
    - uses: actions/checkout@v1

    - name: checkout submodules
      run: git submodule update --init --recursive

    - name: install dependencies
      run: |
        # If clang, use the default version. Otherwise the compiler install with apt-get.
        if [[ "${{ matrix.compiler }}" == "g++-8" ]]; then
            sudo apt-get --allow-downgrades install \
                g++-8=8-20180414-1ubuntu2 \
                gcc-8-base=8-20180414-1ubuntu2 \
                gcc-8=8-20180414-1ubuntu2 \
                libstdc++-8-dev=8-20180414-1ubuntu2 \
                cpp-8=8-20180414-1ubuntu2 \
                libgcc-8-dev=8-20180414-1ubuntu2 \
                libmpx2=8-20180414-1ubuntu2
        elif [[ "${{ matrix.compiler }}" != "clang" ]]; then
            sudo apt-get install ${{ matrix.compiler }}
        fi

        sudo apt-get install libbz2-dev libhts-dev libjemalloc-dev libboost-all-dev

        if [ "${{ matrix.build_static }}" = "ON" ]; then
          # for static builds, compile curl ourselves
          git clone https://github.com/curl/curl.git
          mkdir curl/_build
          cd curl/_build
          cmake -DBUILD_SHARED_LIBS=off ..
          make -j 2
          sudo make install
        fi

    - name: install dependencies for integration tests
      run: |
        pip3 install parameterized
        sudo apt-get install python3-venv

    - name: install sdsl-lite
      run: |
        export CC=$(which ${{ matrix.cc }})
        export CXX=$(which ${{ matrix.cxx }})
        cd metagraph/external-libraries/sdsl-lite
        ./install.sh $(pwd)

    - name: configure
      run: |
        export CC=$(which ${{ matrix.cc }})
        export CXX=$(which ${{ matrix.cxx }})
        mkdir metagraph/build
        cd metagraph/build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_DBG_ALPHABET=${{ matrix.alphabet }} \
              -DBUILD_STATIC=${{ matrix.build_static }} ..

    - name: build metagraph
      run: cd metagraph/build && make -j 2 metagraph

    - name: build unit tests
      if: matrix.build_static == 'OFF'
      run: cd metagraph/build && make -j 2 unit_tests

    - name: build other
      run: cd metagraph/build && make -j 2

    - name: run unit tests
      if: matrix.build_static == 'OFF'
      run: |
        export LD_LIBRARY_PATH="/usr/local/lib/:$LD_LIBRARY_PATH"
        cd metagraph/build && ./unit_tests

    - name: run integration tests
      run: |
        export LD_LIBRARY_PATH="/usr/local/lib/:$LD_LIBRARY_PATH"
        cd metagraph/build && make check

    - name: rename static binary
      if: matrix.build_static == 'ON'
      run: mv metagraph/build/metagraph_${{ matrix.alphabet }} metagraph/build/metagraph_${{ matrix.alphabet }}_linux_x86

    # for potential release
    - name: upload static binary
      if: matrix.build_static == 'ON'
      uses: actions/upload-artifact@v2
      with:
        name: metagraph_${{ matrix.alphabet }}_static_binary
        path: metagraph/build/metagraph_${{ matrix.alphabet }}_linux_x86


  MacOS:

    runs-on: macos-latest

    strategy:
      matrix:
        alphabet: [DNA]
        build_type: [Debug, Release]
        build_static: [OFF]
        include:
          - alphabet: DNA
            build_type: Release
            build_static: ON
          - alphabet: Protein
            build_type: Release
            build_static: ON

    steps:
    - uses: actions/checkout@v1

    - name: checkout submodules
      run: git submodule update --init --recursive

    - name: install dependencies
      run: brew install bzip2 htslib libomp boost jemalloc

    - name: install dependencies for integration tests
      run: pip3 install parameterized

    - name: install sdsl-lite
      run: |
        cd metagraph/external-libraries/sdsl-lite
        ./install.sh $(pwd)

    - name: configure
      run: |
        mkdir metagraph/build
        cd metagraph/build

        BUILD_KMC="ON"
        if [ "${{ matrix.build_static }}" = "ON" ]; then
          BUILD_KMC="OFF"
        fi

        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DCMAKE_DBG_ALPHABET=${{ matrix.alphabet }} \
              -DBUILD_STATIC=${{ matrix.build_static }} \
              -DBZIP2_LIBRARY_RELEASE=/usr/local/opt/bzip2/lib/libbz2.a \
              -DBUILD_KMC=${BUILD_KMC} \
              -DWITH_AVX=OFF -DWITH_MSSE42=OFF ..

    - name: build metagraph
      run: cd metagraph/build && make -j 2 metagraph

    - name: build unit tests
      if: matrix.build_static == 'OFF'
      run: cd metagraph/build && make -j 2 unit_tests

    - name: build other
      run: cd metagraph/build && make -j 2

    - name: run unit tests
      if: matrix.build_static == 'OFF'
      run: cd metagraph/build && ./unit_tests

    - name: run integration tests
      run: cd metagraph/build && make check

    - name: rename static binary
      if: matrix.build_static == 'ON'
      run: mv metagraph/build/metagraph_${{ matrix.alphabet }} metagraph/build/metagraph_${{ matrix.alphabet }}_mac_osx

    # for potential release
    - name: upload static binary
      if: matrix.build_static == 'ON'
      uses: actions/upload-artifact@v2
      with:
        name: metagraph_${{ matrix.alphabet }}_static_binary_mac_osx
        path: metagraph/build/metagraph_${{ matrix.alphabet }}_mac_osx

  Release:
    name: Create Release
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: [Linux, MacOS]
    steps:
      - name: fetch static binary
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - name: create release with static binaries
        uses: svenstaro/upload-release-action@v2
        with:
          release_name: Release ${{ github.ref }}
          body: |
            The binaries are currently provided on an experimental basis.
            The Linux binaries are statically linked and hence don't require additional libraries to be installed.
            The Mac OS X binaries dynamically link to libhts, which would need to be available on your system, e.g. using `brew install htslib`).
            The Mac OS X binaries are currently nor signed nor notarized - you need to explicitely allow the binary to run in the security settings of your system.
          file: 'artifacts/*/metagraph_*'
          file_glob: true
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref }}
          prerelease: true
